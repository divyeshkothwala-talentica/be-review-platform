name: Simple Deployment Pipeline

on:
  push:
    branches:
      - main
    paths:
      - 'backend/**'
      - '.github/workflows/deploy-application.yml'

env:
  NODE_VERSION: '18'
  INSTANCE_IP: '44.194.207.22'

jobs:
  deploy:
    name: Deploy Application
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    steps:
      # Step 1: Check compile errors
      - name: 1️⃣ Check Compile Errors
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: TypeScript compile check
        run: |
          echo "🔍 Checking for TypeScript compile errors..."
          npm run typecheck
          echo "✅ No compile errors found"

      # Step 2: Check linting issues
      - name: 2️⃣ Check Linting Issues
        run: |
          echo "🔍 Checking for linting issues..."
          npm run lint
          echo "✅ No linting issues found"

      # Step 3: Build
      - name: 3️⃣ Build Application
        run: |
          echo "🏗️ Building application..."
          npm run build
          echo "✅ Build completed successfully"

      # Configure AWS credentials for Systems Manager
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # Get EC2 instance ID from IP address
      - name: Get EC2 Instance ID
        id: get-instance
        run: |
          echo "🔍 Finding EC2 instance ID for IP ${{ env.INSTANCE_IP }}..."
          INSTANCE_ID=$(aws ec2 describe-instances \
            --filters "Name=instance-state-name,Values=running" \
                      "Name=public-ip-address,Values=${{ env.INSTANCE_IP }}" \
            --query 'Reservations[0].Instances[0].InstanceId' \
            --output text)
          
          if [ "$INSTANCE_ID" = "None" ] || [ "$INSTANCE_ID" = "null" ]; then
            echo "❌ Could not find running instance with IP ${{ env.INSTANCE_IP }}"
            exit 1
          fi
          
          echo "✅ Found instance ID: $INSTANCE_ID"
          echo "instance_id=$INSTANCE_ID" >> $GITHUB_OUTPUT

      # Step 4: Deploy to existing infrastructure using Systems Manager
      - name: 4️⃣ Deploy to Production Server via Systems Manager
        run: |
          echo "🚀 Deploying to production server via AWS Systems Manager..."
          
          INSTANCE_ID="${{ steps.get-instance.outputs.instance_id }}"
          echo "Instance ID: $INSTANCE_ID"
          
          # Create deployment script
          cat > deploy-script.sh << 'DEPLOY_SCRIPT'
          #!/bin/bash
          set -e
          
          echo "📦 Starting deployment on server..."
          
          # Navigate to app directory
          cd /opt/book-review-api/current/backend 2>/dev/null || {
            echo "App directory not found, setting up fresh deployment..."
            sudo mkdir -p /opt/book-review-api
            cd /opt/book-review-api
            sudo git clone https://github.com/${{ github.repository }}.git current
            cd current/backend
          }
          
          # Update code
          echo "📥 Pulling latest code..."
          sudo git fetch origin
          sudo git reset --hard origin/main
          
          # Install and build
          echo "🏗️ Installing dependencies and building..."
          sudo npm ci --only=production
          sudo npm run build
          
          # Restart application
          echo "🔄 Restarting application..."
          sudo pkill -f "node.*app.js" 2>/dev/null || true
          sleep 3
          cd dist
          sudo nohup node app.js > /var/log/book-review-api.log 2>&1 &
          
          echo "✅ Deployment completed successfully"
          echo "📊 Application status:"
          sleep 2
          ps aux | grep "node.*app.js" | grep -v grep || echo "Application process not found"
          DEPLOY_SCRIPT
          
          # Execute deployment via Systems Manager
          echo "🔧 Executing deployment script via Systems Manager..."
          COMMAND_ID=$(aws ssm send-command \
            --instance-ids "$INSTANCE_ID" \
            --document-name "AWS-RunShellScript" \
            --parameters 'commands=["'"$(cat deploy-script.sh | base64 -w 0)"'" | base64 -d | bash]' \
            --query 'Command.CommandId' \
            --output text)
          
          echo "Command ID: $COMMAND_ID"
          
          # Wait for command completion
          echo "⏳ Waiting for deployment to complete..."
          for i in {1..60}; do
            STATUS=$(aws ssm get-command-invocation \
              --command-id "$COMMAND_ID" \
              --instance-id "$INSTANCE_ID" \
              --query 'Status' \
              --output text 2>/dev/null || echo "InProgress")
            
            echo "Status: $STATUS (attempt $i/60)"
            
            if [ "$STATUS" = "Success" ]; then
              echo "✅ Deployment completed successfully!"
              break
            elif [ "$STATUS" = "Failed" ] || [ "$STATUS" = "Cancelled" ] || [ "$STATUS" = "TimedOut" ]; then
              echo "❌ Deployment failed with status: $STATUS"
              aws ssm get-command-invocation \
                --command-id "$COMMAND_ID" \
                --instance-id "$INSTANCE_ID" \
                --query 'StandardErrorContent' \
                --output text
              exit 1
            fi
            
            sleep 5
          done
          
          # Get command output
          echo "📋 Deployment output:"
          aws ssm get-command-invocation \
            --command-id "$COMMAND_ID" \
            --instance-id "$INSTANCE_ID" \
            --query 'StandardOutputContent' \
            --output text

      - name: Verify Deployment
        run: |
          echo "🔍 Verifying deployment..."
          sleep 15
          
          # Basic health check
          echo "Testing application endpoints..."
          
          # Try health endpoint
          if curl -f -m 10 http://${{ env.INSTANCE_IP }}/health 2>/dev/null; then
            echo "✅ Health check endpoint responded"
          else
            echo "⚠️ Health check endpoint not responding (may not be implemented)"
          fi
          
          # Try root endpoint
          if curl -f -m 10 http://${{ env.INSTANCE_IP }}/ 2>/dev/null; then
            echo "✅ Root endpoint responded"
          else
            echo "⚠️ Root endpoint not responding"
          fi
          
          # Try API endpoint
          if curl -f -m 10 http://${{ env.INSTANCE_IP }}/api/v1/books 2>/dev/null; then
            echo "✅ API endpoint responded"
          else
            echo "⚠️ API endpoint not responding"
          fi
          
          echo "🎉 Deployment completed! Application should be running at http://${{ env.INSTANCE_IP }}"
          echo "📋 Check the Systems Manager command output above for detailed deployment logs"
