name: Application Deployment

on:
  push:
    branches:
      - main
    paths:
      - 'backend/**'
      - '.github/workflows/deploy-application.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      rollback:
        description: 'Rollback to previous version'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18'
  AWS_REGION: 'us-east-1'

jobs:
  build:
    name: Build Application
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        run: |
          echo "📦 Installing all dependencies (including devDependencies for TypeScript)..."
          npm ci
          echo "✅ Dependencies installed"
          
          echo "🔍 Verifying TypeScript and type definitions..."
          npx tsc --version
          ls -la node_modules/@types/ | head -5
          echo "✅ Type definitions verified"

      - name: Build application
        run: |
          echo "🏗️ Building TypeScript application..."
          npm run build
          echo "✅ Build completed"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            backend/dist/
            backend/package.json
            backend/package-lock.json
          retention-days: 7

  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Find existing EC2 instance
        id: find-instance
        run: |
          echo "🔍 Finding existing EC2 instance for production..."
          
          # Find EC2 instance by tag or name pattern
          INSTANCE_INFO=$(aws ec2 describe-instances \
            --filters "Name=instance-state-name,Values=running" \
                      "Name=tag:Environment,Values=prod" \
                      "Name=tag:Project,Values=book-review-platform" \
            --query 'Reservations[0].Instances[0].[InstanceId,PublicIpAddress]' \
            --output text 2>/dev/null || echo "")
          
          if [ -z "$INSTANCE_INFO" ] || [ "$INSTANCE_INFO" = "None None" ]; then
            echo "❌ No running production instance found with tags"
            echo "Trying to find by instance type and key pair..."
            
            # Fallback: find by instance type and key pair
            INSTANCE_INFO=$(aws ec2 describe-instances \
              --filters "Name=instance-state-name,Values=running" \
                        "Name=instance-type,Values=t3.medium" \
                        "Name=key-name,Values=review-platform-backend-key" \
              --query 'Reservations[0].Instances[0].[InstanceId,PublicIpAddress]' \
              --output text 2>/dev/null || echo "")
          fi
          
          if [ -z "$INSTANCE_INFO" ] || [ "$INSTANCE_INFO" = "None None" ]; then
            echo "❌ No suitable EC2 instance found!"
            echo ""
            echo "🔍 Available instances:"
            aws ec2 describe-instances \
              --filters "Name=instance-state-name,Values=running" \
              --query 'Reservations[].Instances[].[InstanceId,PublicIpAddress,InstanceType,KeyName,Tags[?Key==`Name`].Value|[0]]' \
              --output table
            echo ""
            echo "💡 Using known working IP as fallback..."
            INSTANCE_IP="44.194.207.22"
            echo "instance_ip=$INSTANCE_IP" >> $GITHUB_OUTPUT
            echo "✅ Using fallback IP: $INSTANCE_IP"
          else
            INSTANCE_ID=$(echo $INSTANCE_INFO | cut -d' ' -f1)
            INSTANCE_IP=$(echo $INSTANCE_INFO | cut -d' ' -f2)
            
            echo "✅ Found instance: $INSTANCE_ID"
            echo "✅ Public IP: $INSTANCE_IP"
            
            echo "instance_id=$INSTANCE_ID" >> $GITHUB_OUTPUT
            echo "instance_ip=$INSTANCE_IP" >> $GITHUB_OUTPUT
          fi

      - name: Verify instance information
        id: instance
        run: |
          INSTANCE_IP="${{ steps.find-instance.outputs.instance_ip }}"
          
          echo "🔍 Verifying instance accessibility..."
          echo "Instance IP: $INSTANCE_IP"
          
          # Verify instance is reachable
          if ping -c 1 -W 5 $INSTANCE_IP > /dev/null 2>&1; then
            echo "✅ Instance is reachable via ping"
          else
            echo "⚠️  Instance not reachable via ping (may be normal if ICMP is blocked)"
          fi
          
          echo "instance_ip=$INSTANCE_IP" >> $GITHUB_OUTPUT

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H ${{ steps.instance.outputs.instance_ip }} >> ~/.ssh/known_hosts

      - name: Deploy application
        if: ${{ !github.event.inputs.rollback }}
        run: |
          chmod +x terraform/scripts/deploy-application.sh
          ./terraform/scripts/deploy-application.sh \
            -e prod \
            -r ${{ github.repository }} \
            -b ${{ github.ref_name }} \
            -k ~/.ssh/deploy_key

      - name: Rollback application
        if: ${{ github.event.inputs.rollback }}
        run: |
          chmod +x terraform/scripts/deploy-application.sh
          ./terraform/scripts/deploy-application.sh \
            -e prod \
            --rollback \
            -k ~/.ssh/deploy_key

      - name: Run health check
        run: |
          sleep 30
          curl -f https://${{ steps.instance.outputs.instance_ip }}/health || exit 1

      - name: Run comprehensive tests
        run: |
          # Health check
          curl -f https://${{ steps.instance.outputs.instance_ip }}/health || exit 1
          
          # API endpoints
          curl -f https://${{ steps.instance.outputs.instance_ip }}/api/v1/books || exit 1
          
          # Database connectivity (through API)
          response=$(curl -s https://${{ steps.instance.outputs.instance_ip }}/api/v1/books)
          if [[ $response == *"error"* ]]; then
            echo "❌ Database connectivity test failed"
            exit 1
          fi
          
          echo "✅ All production tests passed"

      - name: Notify deployment success
        if: success() && !github.event.inputs.rollback
        run: |
          echo "🚀 Production deployment successful!"
          echo "Application URL: https://${{ steps.instance.outputs.instance_ip }}"
          echo "Please monitor the application closely for the next few hours."

      - name: Notify rollback success
        if: success() && github.event.inputs.rollback
        run: |
          echo "🔄 Production rollback successful!"
          echo "Application has been rolled back to the previous version."

  rollback:
    name: Rollback Application
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.rollback
    environment: ${{ github.event.inputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download Terraform outputs
        uses: actions/download-artifact@v4
        with:
          name: terraform-outputs-${{ github.event.inputs.environment }}
          path: terraform/environments/${{ github.event.inputs.environment }}/
        continue-on-error: true

      - name: Get instance information
        id: instance
        run: |
          if [ -f terraform/environments/${{ github.event.inputs.environment }}/terraform-outputs.json ]; then
            INSTANCE_IP=$(jq -r '.instance_public_ip.value' terraform/environments/${{ github.event.inputs.environment }}/terraform-outputs.json)
            echo "instance_ip=$INSTANCE_IP" >> $GITHUB_OUTPUT
          else
            echo "Terraform outputs not found. Please run infrastructure deployment first."
            exit 1
          fi

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H ${{ steps.instance.outputs.instance_ip }} >> ~/.ssh/known_hosts

      - name: Perform rollback
        run: |
          chmod +x terraform/scripts/deploy-application.sh
          ./terraform/scripts/deploy-application.sh \
            -e ${{ github.event.inputs.environment }} \
            --rollback \
            -k ~/.ssh/deploy_key

      - name: Verify rollback
        run: |
          sleep 30
          curl -f https://${{ steps.instance.outputs.instance_ip }}/health || exit 1
          echo "✅ Rollback verification successful"

      - name: Notify rollback completion
        if: success()
        run: |
          echo "🔄 Rollback completed for ${{ github.event.inputs.environment }} environment"
          echo "Application URL: https://${{ steps.instance.outputs.instance_ip }}"
