name: Deploy Without Tests (DISABLED)

on:
  # Disabled to prevent conflicts with deploy-application.yml
  # push:
  #   branches:
  #     - main
  #   paths:
  #     - 'backend/**'
  #     - '.github/workflows/deploy-no-tests.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - prod

env:
  NODE_VERSION: '18'
  AWS_REGION: 'us-east-1'

jobs:
  build:
    name: Build Application
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        run: npm ci --production

      - name: Build application
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            backend/dist/
            backend/package.json
            backend/package-lock.json
          retention-days: 7

  deploy:
    name: Deploy to Environment
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    environment: ${{ github.event.inputs.environment || 'staging' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set environment variable
        id: env
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          else
            echo "environment=staging" >> $GITHUB_OUTPUT
          fi

      - name: Download Terraform outputs
        uses: actions/download-artifact@v4
        with:
          name: terraform-outputs-${{ steps.env.outputs.environment }}
          path: terraform/environments/${{ steps.env.outputs.environment }}/
        continue-on-error: true

      - name: Check infrastructure and get instance information
        id: instance
        run: |
          ENV="${{ steps.env.outputs.environment }}"
          OUTPUTS_FILE="terraform/environments/$ENV/terraform-outputs.json"
          
          echo "üîç Checking infrastructure for $ENV environment..."
          
          if [ -f "$OUTPUTS_FILE" ]; then
            echo "‚úÖ Found terraform outputs file"
            INSTANCE_IP=$(jq -r '.instance_public_ip.value' "$OUTPUTS_FILE" 2>/dev/null || echo "")
            
            if [ "$INSTANCE_IP" = "null" ] || [ -z "$INSTANCE_IP" ]; then
              echo "‚ùå Invalid or missing instance IP in terraform outputs"
              echo "File contents:"
              cat "$OUTPUTS_FILE" || echo "Could not read file"
              exit 1
            fi
            
            echo "instance_ip=$INSTANCE_IP" >> $GITHUB_OUTPUT
            echo "‚úÖ Found instance IP: $INSTANCE_IP"
            
          else
            echo "‚ùå Infrastructure not found for $ENV environment"
            echo ""
            echo "üìã Missing file: $OUTPUTS_FILE"
            echo ""
            echo "üîß To fix this issue, you need to deploy infrastructure first:"
            echo ""
            echo "Option 1 - Using Terraform directly:"
            echo "  cd terraform"
            echo "  terraform init"
            echo "  terraform workspace select $ENV || terraform workspace new $ENV"
            echo "  terraform plan -var-file=\"environments/$ENV/terraform.tfvars\""
            echo "  terraform apply"
            echo ""
            echo "Option 2 - Using deployment script:"
            echo "  ./terraform/scripts/deploy-infrastructure.sh -e $ENV"
            echo ""
            echo "Option 3 - Using GitHub Actions:"
            echo "  Go to Actions ‚Üí Infrastructure Deployment ‚Üí Run workflow"
            echo "  Select environment: $ENV"
            echo "  Select action: apply"
            echo ""
            echo "üìñ For detailed instructions, see:"
            echo "  - terraform/DEPLOYMENT_GUIDE.md"
            echo "  - terraform/LOCAL_TESTING_GUIDE.md"
            echo ""
            exit 1
          fi

      - name: Validate required secrets
        run: |
          echo "üîê Validating required secrets..."
          
          MISSING_SECRETS=""
          
          if [ -z "${{ secrets.SSH_PRIVATE_KEY }}" ]; then
            MISSING_SECRETS="$MISSING_SECRETS SSH_PRIVATE_KEY"
          fi
          
          if [ -z "${{ secrets.AWS_ACCESS_KEY_ID }}" ]; then
            MISSING_SECRETS="$MISSING_SECRETS AWS_ACCESS_KEY_ID"
          fi
          
          if [ -z "${{ secrets.AWS_SECRET_ACCESS_KEY }}" ]; then
            MISSING_SECRETS="$MISSING_SECRETS AWS_SECRET_ACCESS_KEY"
          fi
          
          if [ -n "$MISSING_SECRETS" ]; then
            echo "‚ùå Missing required secrets:$MISSING_SECRETS"
            echo ""
            echo "üîß Please add these secrets to your GitHub repository:"
            echo "  Settings ‚Üí Secrets and variables ‚Üí Actions ‚Üí New repository secret"
            echo ""
            for secret in $MISSING_SECRETS; do
              echo "  - $secret"
            done
            echo ""
            exit 1
          fi
          
          echo "‚úÖ All required secrets are configured"

      - name: Setup SSH key
        run: |
          echo "üîë Setting up SSH key..."
          
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          
          # Test SSH key format
          if ! ssh-keygen -l -f ~/.ssh/deploy_key > /dev/null 2>&1; then
            echo "‚ùå Invalid SSH key format"
            echo "Please ensure SSH_PRIVATE_KEY secret contains a valid private key"
            echo "The key should start with '-----BEGIN' and end with '-----END'"
            exit 1
          fi
          
          echo "‚úÖ SSH key configured successfully"
          
          # Add instance to known hosts
          echo "üåê Adding instance to known hosts..."
          ssh-keyscan -H ${{ steps.instance.outputs.instance_ip }} >> ~/.ssh/known_hosts
          
          # Test SSH connection
          echo "üîó Testing SSH connection..."
          if ssh -i ~/.ssh/deploy_key -o ConnectTimeout=10 -o StrictHostKeyChecking=no ec2-user@${{ steps.instance.outputs.instance_ip }} "echo 'SSH connection successful'" 2>/dev/null; then
            echo "‚úÖ SSH connection test passed"
          else
            echo "‚ùå SSH connection test failed"
            echo ""
            echo "üîß Possible issues:"
            echo "  - Instance is not running or not accessible"
            echo "  - Security group doesn't allow SSH from GitHub Actions IPs"
            echo "  - SSH key doesn't match the key pair used for the instance"
            echo "  - Instance is still starting up (try again in a few minutes)"
            echo ""
            echo "üîç Debug information:"
            echo "  Instance IP: ${{ steps.instance.outputs.instance_ip }}"
            echo "  SSH User: ec2-user"
            echo ""
            exit 1
          fi

      - name: Deploy application
        run: |
          echo "üöÄ Starting deployment (NO TESTS)..."
          
          chmod +x terraform/scripts/deploy-application.sh
          
          ./terraform/scripts/deploy-application.sh \
            -e ${{ steps.env.outputs.environment }} \
            -r ${{ github.repository }} \
            -b ${{ github.ref_name }} \
            -k ~/.ssh/deploy_key

      - name: Run health check
        run: |
          echo "üè• Running health check..."
          
          # Wait for application to start
          sleep 30
          
          INSTANCE_IP="${{ steps.instance.outputs.instance_ip }}"
          HEALTH_URL="http://$INSTANCE_IP:5000/health"
          
          echo "Testing health endpoint: $HEALTH_URL"
          
          # Try health check multiple times
          for i in {1..5}; do
            echo "Health check attempt $i/5..."
            
            if curl -f -s --connect-timeout 10 --max-time 30 "$HEALTH_URL" > /dev/null; then
              echo "‚úÖ Health check passed!"
              
              # Test a basic API endpoint
              API_URL="http://$INSTANCE_IP:5000/api/v1/books"
              echo "Testing API endpoint: $API_URL"
              
              if curl -f -s --connect-timeout 10 --max-time 30 "$API_URL" > /dev/null; then
                echo "‚úÖ API endpoint test passed!"
              else
                echo "‚ö†Ô∏è  API endpoint test failed, but health check passed"
              fi
              
              break
            else
              echo "‚ùå Health check failed (attempt $i/5)"
              if [ $i -lt 5 ]; then
                echo "Waiting 15 seconds before retry..."
                sleep 15
              fi
            fi
          done
          
          # Final check
          if ! curl -f -s --connect-timeout 10 --max-time 30 "$HEALTH_URL" > /dev/null; then
            echo "‚ùå Final health check failed"
            echo ""
            echo "üîç Debug information:"
            echo "  Health URL: $HEALTH_URL"
            echo "  Instance IP: $INSTANCE_IP"
            echo ""
            echo "üîß Troubleshooting:"
            echo "  1. Check if the application started correctly"
            echo "  2. Verify security groups allow HTTP traffic on port 5000"
            echo "  3. Check application logs on the instance"
            echo ""
            exit 1
          fi

      - name: Deployment summary
        if: success()
        run: |
          ENV="${{ steps.env.outputs.environment }}"
          INSTANCE_IP="${{ steps.instance.outputs.instance_ip }}"
          
          echo "üéâ Deployment completed successfully (NO TESTS RAN)!"
          echo ""
          echo "üìã Deployment Summary:"
          echo "  Environment: $ENV"
          echo "  Repository: ${{ github.repository }}"
          echo "  Branch: ${{ github.ref_name }}"
          echo "  Instance IP: $INSTANCE_IP"
          echo "  Tests: SKIPPED (as requested)"
          echo ""
          echo "üîó Application URLs:"
          echo "  Health Check: http://$INSTANCE_IP:5000/health"
          echo "  API Base: http://$INSTANCE_IP:5000/api/v1"
          echo "  Books API: http://$INSTANCE_IP:5000/api/v1/books"
          echo ""
          echo "üîç Monitoring:"
          echo "  SSH to instance: ssh -i ~/.ssh/deploy_key ec2-user@$INSTANCE_IP"
          echo "  Check logs: tail -f /var/log/book-review-api/combined.log"
          echo "  PM2 status: pm2 list"
          echo ""
          if [ "$ENV" = "prod" ]; then
            echo "‚ö†Ô∏è  Production Deployment Notice:"
            echo "  - Monitor application closely for the next few hours"
            echo "  - Verify all functionality works as expected"
            echo "  - Check error rates and performance metrics"
            echo "  - NOTE: Tests were skipped during deployment"
          fi
